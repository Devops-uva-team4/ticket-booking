name: Regular Traffic Test

on:
  workflow_dispatch:

env:
  CLUSTER_NAME: ticket-booking-k8s.obsessionforlearning.com
  STATE_STORE: s3://ticket-booking-k8s
  NAMESPACE: default
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  SECRET_ID: ${{ secrets.SECRET_ID }}

jobs:
  regular-traffic-test:
    name: Regular Traffic Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Install Kops
        run: |
          curl -LO https://github.com/kubernetes/kops/releases/latest/download/kops-linux-amd64
          chmod +x kops-linux-amd64
          sudo mv kops-linux-amd64 /usr/local/bin/kops

      - name: Export Kops Cluster Configuration
        run: |
          export KOPS_STATE_STORE=$STATE_STORE
          kops export kubecfg --name $CLUSTER_NAME --state=$STATE_STORE --admin

      - name: Show HPA Status Before Testing
        run: |
          echo "HPA status before testing:"
          kubectl get hpa

      - name: Generate Authentication Token
        run: |
          TOKEN=$(curl -X POST "https://eu-central-1qyxweokre.auth.eu-central-1.amazoncognito.com/oauth2/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$SECRET_ID&scope=default-m2m-resource-server-o3yhkn/read" \
            | jq -r '.access_token')
          if [ -z "$TOKEN" ]; then
            echo "Failed to generate token"
            exit 1
          fi
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Simulate Regular Traffic
        run: |
          echo "Starting regular traffic simulation for ticket-booking..."
          start_time=$(date +%s)
          end_time=$((start_time + 30))

          while [ $(date +%s) -lt $end_time ]; do
            echo "Sending request at $(date):"
            curl -X PUT -H "Authorization: Bearer $TOKEN" -w "\nHTTP Status: %{http_code}\n" "http://ticket-booking.obsessionforlearning.com/ticket" || echo "Call failed"
            echo "----------------------------------------"
            sleep 0.1
          done

          echo "Traffic simulation completed."

      - name: Show HPA Status After Testing
        run: |
          echo "HPA status immediately after traffic test:"
          kubectl get hpa

      - name: Cooldown Period (3 min) - Monitoring HPA
        run: |
          echo "Waiting for 3 minutes to observe HPA scaling behavior..."
          cooldown_start=$(date +%s)
          cooldown_end=$((cooldown_start + 180))

          while [ $(date +%s) -lt $cooldown_end ]; do
            remaining=$((cooldown_end - $(date +%s)))
            echo "Time left in cooldown: ${remaining} seconds"
            kubectl get hpa
            sleep 10
          done

      - name: Show Final HPA Status
        run: |
          echo "Final HPA status after cooldown:"
          kubectl get hpa